{"version":3,"sources":["Comment.module.css","reportWebVitals.ts","PostMessage.tsx","Comment.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PostMessage","parent","commentAdd","useState","text","setText","error","setError","callbackCommentAdd","trim","style","padding","TextField","id","label","multiline","value","autoFocus","onChange","e","currentTarget","onKeyPress","code","shiftKey","preventDefault","helperText","Button","color","variant","onClick","endIcon","Send","size","Comment","comment","toggle","setToggle","nestedComments","children","map","className","c","wrapperComment","commentAuthor","author","commentText","Reply","Grid","item","Paper","elevation","paddingRight","comments","parentId","App","commentTree","setCommentTree","rerender","newComment","length","push","localStorage","JSON","stringify","useEffect","localStorageElement","parse","list","roots","i","node","createTree","Container","container","ps","spacing","Box","sx","width","LinearProgress","flex","maxHeight","overflowY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d4dbc39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperComment\":\"Comment_wrapperComment__1x62m\",\"commentAuthor\":\"Comment_commentAuthor__2kZds\",\"commentText\":\"Comment_commentText__C8g5B\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {CommentsType} from \"./App\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {Send} from \"@material-ui/icons\";\r\n\r\nexport type PostMessageType = {\r\n    parent: CommentsType | null\r\n    commentAdd: (parent: CommentsType | null, text: string) => void\r\n}\r\n\r\nfunction PostMessage({parent, commentAdd}: PostMessageType) {\r\n    const [text, setText] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeTextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setText(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n    const callbackCommentAdd = () => {\r\n        if (text.trim() !== '') {\r\n            commentAdd(parent, text.trim())\r\n            setText('')\r\n        } else {\r\n            setError('Введите текст!')\r\n        }\r\n        setText('')\r\n    }\r\n    const onKeyEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        if (e.code === \"Enter\" && !e.shiftKey) {\r\n            setText('')\r\n            e.preventDefault()\r\n            callbackCommentAdd()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{padding: \"10px\"}}>\r\n            <TextField\r\n                id=\"outlined-textarea\"\r\n                label=\"Next message...\"\r\n                multiline\r\n                value={text}\r\n                autoFocus\r\n                onChange={onChangeTextHandler}\r\n                onKeyPress={onKeyEnter}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <Button color={\"success\"}\r\n                    variant=\"contained\"\r\n                    onClick={callbackCommentAdd}\r\n                    endIcon={<Send/>}\r\n                    size={\"small\"}\r\n            >\r\n                Text\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostMessage;","import React from \"react\";\r\nimport c from \"./Comment.module.css\"\r\nimport PostMessage from \"./PostMessage\";\r\nimport {CommentsType} from \"./App\";\r\nimport {Button, Grid, Paper} from \"@material-ui/core\";\r\nimport {Reply} from \"@material-ui/icons\";\r\n\r\nexport type CommentPropsType = {\r\n    comment: CommentsType\r\n    commentAdd: (parent: CommentsType | null, text: string) => void\r\n    toggle: null | number\r\n    setToggle: (toggle: null | number) => void\r\n}\r\n\r\nexport function Comment({comment, toggle, setToggle, commentAdd}: CommentPropsType) {\r\n\r\n    const nestedComments = (comment.children || []).map((comment: CommentsType) => {\r\n        return (\r\n            <Comment key={comment.id}\r\n                     commentAdd={commentAdd}\r\n                     comment={comment} toggle={toggle}\r\n                     setToggle={setToggle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={c.wrapperComment}>\r\n            <div className={c.commentAuthor}>\r\n                {comment.author}\r\n            </div>\r\n            <div className={c.commentText}>{comment.text}</div>\r\n            {toggle !== comment.id\r\n                ?\r\n                <Button onClick={() => setToggle?.(comment.id)}\r\n                        color={\"primary\"}\r\n                        variant=\"contained\"\r\n                        endIcon={<Reply/>}\r\n                        size={\"small\"}\r\n                >\r\n                    reply\r\n                </Button>\r\n                :\r\n                <Button onClick={() => setToggle?.(null)}\r\n                        color={\"secondary\"}\r\n                        variant=\"contained\"\r\n                        size={\"small\"}\r\n                >\r\n                    cancel\r\n                </Button>\r\n            }\r\n            <Grid item>\r\n                {toggle === comment.id &&\r\n                <PostMessage parent={comment}\r\n                             commentAdd={(...args) => {\r\n                                 commentAdd(...args)\r\n                                 setToggle(null)\r\n                             }\r\n                             }\r\n                />\r\n                }\r\n                <div className={c.commentText}>\r\n                    <Paper elevation={2} style={{paddingRight: '20px'}}>\r\n                        {nestedComments}\r\n                    </Paper>\r\n                </div>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\nimport {Comment} from \"./Comment\";\nimport PostMessage from \"./PostMessage\";\nimport {Box, Container, Grid, LinearProgress, Paper} from \"@material-ui/core\";\n\nexport type CommentsType = {\n    id: number,\n    parentId: null | number,\n    text: string,\n    author: string,\n    children: null | CommentsType[],\n}\n\nlet comments: CommentsType[] = [\n    {\n        id: 1,\n        parentId: null,\n        text: 'Всем привет! Как дела?',\n        author: 'Антон',\n        children: null,\n    },\n    {\n        id: 3,\n        parentId: 1,\n        text: 'Привет! нормально, сам как?',\n        author: 'Евгений',\n        children: null,\n    },\n    {\n        id: 2,\n        parentId: 1,\n        text: 'Хай! Норм, только дел много...',\n        author: 'Сергей',\n        children: null,\n    },\n    {\n        id: 5,\n        parentId: null,\n        text: 'Как тестовое? все в порядке?',\n        author: 'Владимир',\n        children: null,\n    },\n    {\n        id: 4,\n        parentId: 2,\n        text: 'Какие дела? отдыхать тоже надо)',\n        author: 'Надежда',\n        children: null,\n    },\n    {\n        id: 6,\n        parentId: 5,\n        text: 'Да, нормально! ',\n        author: 'Александр',\n        children: null,\n    },\n]\n\nfunction createTree(list: CommentsType[]) {\n    const map: { [key: string]: number } = {},\n        roots = []\n\n    for (let i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i // инициализировать map\n        list[i].children = [] // инициализировать children\n    }\n\n    for (let i = 0; i < list.length; i += 1) {\n        const node = list[i]\n        if (node.parentId) {\n            list[map[node.parentId]].children!.push(node)\n        } else {\n            roots.push(node)\n        }\n    }\n    return roots\n}\n\nfunction App() {\n    const [toggle, setToggle] = useState<null | number>(null)\n    const [commentTree, setCommentTree] = useState<null | CommentsType[]>(null)\n    const [, rerender] = useState(false)\n\n    const commentAdd = (parent: CommentsType | null, text: string) => {\n        const newComment = {\n            id: comments.length + 1,\n            parentId: parent && parent.id,\n            text,\n            author: \"Анатолий\",\n            children: [],\n        };\n        if (parent)\n            parent.children!.push(newComment)\n        else {\n            commentTree && setCommentTree([...commentTree, newComment])\n        }\n        comments.push({...newComment, children: null})\n        localStorage[\"comments\"] = JSON.stringify(comments)\n    }\n\n    useEffect(() => {\n        let localStorageElement = localStorage[\"comments\"];\n        comments = localStorageElement ? JSON.parse(localStorageElement) : comments\n        setCommentTree(createTree([...comments]))\n    }, [])\n\n    return (\n        <Container>\n            <Grid container>\n                {toggle === null &&\n                <PostMessage commentAdd={(...args) => {\n                    commentAdd(...args)\n                    rerender(ps => !ps)\n                }} parent={null}/>\n                }\n            </Grid>\n            <Grid container style={{padding: \"20px\"}} spacing={2}>\n                {!commentTree &&\n                <Box sx={{ width: '100%' }}>\n                    <LinearProgress />\n                </Box>\n                }\n                {commentTree?.map((comment) => {\n                    return <Grid item style={{flex: \"1 1 25%\"}}>\n                        <Paper elevation={3}\n                               style={{padding: \"20px\", maxHeight: \"500px\", overflowY: \"auto\",}}>\n                            <Comment commentAdd={commentAdd}\n                                     key={comment.id}\n                                     comment={comment}\n                                     toggle={toggle}\n                                     setToggle={setToggle}/>\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </Container>\n    )\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}